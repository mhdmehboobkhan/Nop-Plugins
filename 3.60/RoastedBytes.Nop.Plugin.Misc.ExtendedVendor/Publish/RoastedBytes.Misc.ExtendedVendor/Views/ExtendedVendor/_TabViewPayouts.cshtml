@model int
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
}
@using Nop.Web.Framework;
@using Nop.Core.Infrastructure;

<script type="text/javascript">
    $(document).ready(function () {
        var kTabs = $("#vendor-edit").data("kendoTabStrip");
        kTabs.append({ text: "Vendor Payouts", content: " " });
        $("#vendor-payouts").appendTo($(kTabs.contentElement(4)));
    });
</script>
<div id="vendor-payouts">
    <div id="apexol-data-grid-payouts"></div>

</div>
<script type="text/javascript">
    var reportAggregates = "";

    var allPayoutStatus = [
         {
             Id: 1,
             Name: "Pending"
         },
           {
               Id: 2,
               Name: "Processing"
           },
           {
               Id: 3,
               Name: "Paid"
           },
           {
               Id: 4,
               Name: "Refunded"
           },
           {
               Id: 5,
               Name: "Cancelled"
           },
    ];
    function payoutStatusControlTypeDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:PayoutStatus"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allPayoutStatus
            });
    }
    function onDataBound(e) {

        //update order totals summary
        if (reportAggregates != "") {
            for (var key in reportAggregates) {
                $('#aggregator-vendor-total').text(reportAggregates['VendorTotal']);
                $('#aggregator-commission-total').text(reportAggregates['CommissionTotal']);
                $('#aggregator-payout-total').text(reportAggregates['PayoutTotal']);
            }
        }

        
    }
    $(document).ready(function () {
        $("#apexol-data-grid-payouts").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("ListPayoutsAdmin", "ExtendedVendor", new RouteValueDictionary() { { "Namespaces", "RoastedBytes.Nop.Plugin.Misc.ExtendedVendor.Controllers" }, { "area", "" } }))",
                    type: "POST",
                    dataType: "json",
                    data: {
                        VendorId: @Model
                    }
                },
                update: {
                    url:"@Html.Raw(Url.Action("UpdatePayout", "ExtendedVendor", new RouteValueDictionary() { { "Namespaces", "RoastedBytes.Nop.Plugin.Misc.ExtendedVendor.Controllers" }, { "area", "" } }))",
                type: "POST",
                dataType: "json"
            },
            destroy: {
                url: "@Html.Raw(Url.Action("DeletePayout", "ExtendedVendor", new RouteValueDictionary() { { "Namespaces", "RoastedBytes.Nop.Plugin.Misc.ExtendedVendor.Controllers" }, { "area", "" } }))",
            type: "POST",
            dataType: "json"
        }
        },
        schema: {
        data: "Data",
        total: "Total",
        errors: "Errors",
        model: {
                id: "Id",
                fields: {
                OrderId: { editable: false, type: "string" },
                VendorOrderTotal: { editable: false, type: "number" },
                CommissionPercentage: { editable: true, type: "number" },
                CommissionAmount: { editable: false, type: "number" },
                PayoutAmount: { editable: false, type: "number" },
                PayoutStatusName: { editable: true, type: "string" },
                Remarks: { editable: true, type: "string" },
                Id: { editable: false, type: "number" }
                }
        }
        },
    requestEnd: function (e) {
        if (e.type == "update") {
            this.read();
        }
        else if (e.type == "read") {
            var response = e.response;
            if (response) {
                //store extra data
                reportAggregates = e.response["ExtraData"];
            }
        }

    },
    error: function (e) {
        display_kendoui_grid_error(e);
        // Cancel the changes
        this.cancelChanges();
    },
    pageSize: @(defaultGridPageSize),
        aggregate: [ { field: "VendorOrderTotal", aggregate: "sum" },
                     { field: "CommissionAmount", aggregate: "sum" },
                     { field: "PayoutAmount", aggregate: "sum" }],
    serverPaging: true,
    serverFiltering: true,
    serverSorting: true
    },
    pageable: {
            refresh: true,
            pageSizes: [@(gridPageSizes)]
    },
    editable: {
            confirmation: false,
            mode: "popup"
    },
    scrollable: false,
        dataBound: onDataBound,
    columns: [{
        field: "OrderId",
        title: "@T("Plugin.Misc.ExtendedVendor.Fields.Order")",
        template: "<a href='/admin/order/edit/#: OrderId #' target='_blank'>#: OrderId #</a>",
    width: 50                          
    }, {
        field: "VendorOrderTotal",
        title: "@T("Plugin.Misc.ExtendedVendor.Fields.VendorOrderTotal")",
        width: 100,
        template: "#= CurrencySymbol # #= kendo.toString(VendorOrderTotal, '0.00') #",
        footerTemplate:"<div>Total: <span id=\"aggregator-vendor-total\"></span></div>"
    }, 
    {
    field: "CommissionPercentage",
        title: "@T("Plugin.Misc.ExtendedVendor.Fields.CommissionPercentage")",
    editor: function (container, options) {
        $('<input name="' + options.field + '"/>')
                .appendTo(container)
                .kendoNumericTextBox({
                    format: "{0:n2}",
                    decimals: 2,
                         
                });
        },
    template: "#= kendo.toString(CommissionPercentage, '0.00') # %",

        width: 100
        },
        {
        field: "CommissionAmount",
        title: "@T("Plugin.Misc.ExtendedVendor.Fields.CommissionAmount")",
        width: 100,
        template: "#= CurrencySymbol # #= kendo.toString(CommissionAmount, '0.00') #",
        footerTemplate:"<div>Total: <span id=\"aggregator-commission-total\"></span></div>"
    }, {
    field: "PayoutAmount",
        title: "@T("Plugin.Misc.ExtendedVendor.Fields.PayoutAmount")",
    width: 100,
    template: "#= CurrencySymbol # #= kendo.toString(PayoutAmount, '0.00') #",
    footerTemplate:"<div>Total: <span id=\"aggregator-payout-total\"></span></div>"
    }, {
        field: "PayoutStatusName",
        title: "@T("Plugin.Misc.ExtendedVendor.Fields.PayoutStatus")",
        width: 50,
        editor: payoutStatusControlTypeDropDownEditor,
        template: "#:PayoutStatusName#"
    },
    {
    field: "Remarks",
        title: "@T("Plugin.Misc.ExtendedVendor.Fields.Remarks")",
    width: 300,
    editor: function(container, options){
        $('<textarea name="' + options.field + '" style="width:200px;height:200px" />')
            .appendTo(container);
    }
    }
                     , {
        command: [{
            name: "edit",
            text: "@T("Admin.Common.Edit")"
        }, {
    name: "destroy",
        text: "@T("Admin.Common.Delete")"
    }],
    width: 200
    } ]
    });
    });
</script>
